<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreExtensions</name>
    </assembly>
    <members>
        <member name="T:CoreExtensions.Conversions.CastX">
            <summary>
            Provides all major extensions to cast objects.
            </summary>
        </member>
        <member name="M:CoreExtensions.Conversions.CastX.DynamicCast(System.Object,System.Type)">
            <summary>
            Special dynamic memory allocated casting function. Attempts to cast memory to any type specified.
            </summary>
            <param name="source">Object passed to be casted.</param>
            <param name="dest">Type to be converted to.</param>
            <returns>Dynamically allocated object of type specified, if fails, returns null.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.CastX.MemoryCast(System.Object,System.Object)">
            <summary>
            Fast way to cast memory of one object to another. Does not guarantee to return exact copy.
            </summary>
            <param name="result">Object to be casted memory into.</param>
            <param name="source">Object to be casted memory from.</param>
        </member>
        <member name="M:CoreExtensions.Conversions.CastX.ReinterpretCast(System.Object,System.Type)">
            <summary>
            Casts any type passed to any primitive type specified.
            </summary>
            <param name="value">Object passed to be casted.</param>
            <param name="oftype">Primitive type to be converted to.</param>
            <returns>Casted value of the passed object.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.CastX.StaticCast``1(System.IConvertible)">
            <summary>
            Casts any object to any type specified. Throws exception in case cast fails.
            </summary>
            <typeparam name="TypeID">Type to be converted to.</typeparam>
            <param name="value">Object passed to be casted.</param>
            <returns>Casted value of type specified. If casting fails, exception will be thrown.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.CastX.ReinterpretCast``2(``0)">
            <summary>
            Reinterprets pointer to the unmanaged object passed and returns instance of new unmanaged 
            type specified.
            </summary>
            <typeparam name="T">Unmanaged type to reinterpret.</typeparam>
            <typeparam name="S">Unmanaged type to cast to.</typeparam>
            <param name="value">Value to reinterpret.</param>
            <returns>New unmanaged instance casted from object passed.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.CastX.CastManaged``2(``0)">
            <summary>
            Reinterprests pointer to the managed object passed and returns instance of new managed
            type specified.
            </summary>
            <typeparam name="T">Managed type to reinterpret.</typeparam>
            <typeparam name="S">Managed type to cast to.</typeparam>
            <param name="value">Value to reinterpret.</param>
            <returns>New managed instance casted from object passed.</returns>
        </member>
        <member name="T:CoreExtensions.Conversions.EnumerableX">
            <summary>
            Provides all major extensions for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:CoreExtensions.Conversions.EnumerableX.GetEnumerableCopy``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Gets copy of <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <typeparamref name="T2"/> 
            converted to type <typeparamref name="T1"/>.
            </summary>
            <typeparam name="T1"><see cref="T:System.Type"/> of the copied 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2"><see cref="T:System.Type"/> of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            provided.</typeparam>
            <param name="value"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to copy.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.EnumerableX.GetListCopy``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Gets copy of <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <typeparamref name="T2"/> 
            converted to type <typeparamref name="T1"/> as <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T1"><see cref="T:System.Type"/> of the copied 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2"><see cref="T:System.Type"/> of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            provided.</typeparam>
            <param name="value"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to copy.</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.EnumerableX.GetArrayCopy``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Gets copy of <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <typeparamref name="T2"/> 
            converted to type <typeparamref name="T1"/> as an array.
            </summary>
            <typeparam name="T1"><see cref="T:System.Type"/> of the copied 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2"><see cref="T:System.Type"/> of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> 
            provided.</typeparam>
            <param name="value"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to copy.</param>
            <returns>Array of type <typeparamref name="T1"/>.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.EnumerableX.FindAllWithSubstring(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Finds all strings in this <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains substring provided.
            </summary>
            <param name="e"></param>
            <param name="match">String to match.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of string that contain matching string.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.EnumerableX.PrimitiveAverage``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds average value of all values in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TypeID"><see cref="T:System.Type"/> of the values.</typeparam>
            <param name="value"></param>
            <returns>Average of all values.</returns>
        </member>
        <member name="T:CoreExtensions.Conversions.FormatX">
            <summary>
            Provides extension for reverse formatting of the strings.
            </summary>
        </member>
        <member name="M:CoreExtensions.Conversions.FormatX.GetFormattedString(System.String,System.String)">
            <summary>
            Returns substring of a value from a specified format.
            Example: if value = "Array[100]" and format = "Array[{X}]", this returns (string)"100".
            </summary>
            <param name="value">String from which to get format</param>
            <param name="format">Format to which parse the string and return the value.</param>
            <returns>String got from format of the value passed.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.FormatX.GetFormattedValue``1(System.String,System.String,``0@)">
            <summary>
            Returns value of <see cref="T:System.IConvertible"/> type from a specified format.
            Example: if value = "Array[100]", format = "Array[{X}]", and type if 4-byte integer,
            this returns (int)100.
            </summary>
            <param name="value">String from which to get format</param>
            <param name="format">Format to which parse the string and return the value.</param>
            <param name="result">Result value of type <see cref="T:System.IConvertible"/> passed.</param>
            <returns>Value got from format of the string passed.</returns>
        </member>
        <member name="T:CoreExtensions.Conversions.HexConverter">
            <summary>
            Provides converting methods for hexadecimal numbers prefixed and not prefixed with "0x".
            </summary>
        </member>
        <member name="M:CoreExtensions.Conversions.HexConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the
            type of this converter, using the specified context.
            </summary>
            <param name="context">An <seealso cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides 
            a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want 
            to convert from.</param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.HexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified
            context and culture information.
            </summary>
            <param name="context">An <seealso cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides 
            a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.HexConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context
            and culture information.
            </summary>
            <param name="context">An <seealso cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides 
            a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
        </member>
        <member name="T:CoreExtensions.Conversions.ListX">
            <summary>
            Provides all major extensions for <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="M:CoreExtensions.Conversions.ListX.Resize``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Resizes <see cref="T:System.Collections.Generic.List`1"/> to a count specified.
            </summary>
            <typeparam name="TypeID"><see cref="T:System.Type"/> of elements in this list.</typeparam>
            <param name="list">This <see cref="T:System.Collections.Generic.List`1"/> to resize.</param>
            <param name="count">Number of items to resize to.</param>
        </member>
        <member name="M:CoreExtensions.Conversions.ListX.RemoveWith``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified        
            predicate, and removes the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TypeID"><see cref="T:System.Type"/> of elements in this list.</typeparam>
            <param name="list">This list to remove element in.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> delegate that defines the 
            conditions of the element to remove.</param>
            <returns>True if removing was successful; false otherwise.</returns>
        </member>
        <member name="M:CoreExtensions.Conversions.ListX.AllUnique``1(System.Collections.Generic.List{``0})">
            <summary>
            Checks whether all elements in <see cref="T:System.Collections.Generic.List`1"/> are unique.
            </summary>
            <typeparam name="TypeID"><see cref="T:System.Type"/> of elements in this list.</typeparam>
            <param name="list">This list to check elements in.</param>
            <returns>True if all elements are unique; false otherwise.</returns>
        </member>
        <member name="T:CoreExtensions.IO.BigEndianBinaryReader">
            <summary>
            Reads primitive data types as binary values in a specific encoding using big-endian methods.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreExtensions.IO.BigEndianBinaryReader"/> class based on 
            the specified stream and using UTF-8 encoding.
            </summary>
            <param name="input">The input stream.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreExtensions.IO.BigEndianBinaryReader"/> class based on 
            the specified stream and using UTF-8 encoding.
            </summary>
            <param name="input">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreExtensions.IO.BigEndianBinaryReader"/> class based on 
            the specified stream and character encoding, and optionally leaves the stream open.
            </summary>
            <param name="input">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="leaveOpen">true to leave the stream open after the 
            <see cref="T:CoreExtensions.IO.BigEndianBinaryReader"/> object is disposed; otherwise, false.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream using big-endian encoding
            and advances the position of the stream by two bytes.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using big-endian encoding
            and advances the position of the stream by two bytes.
            </summary>
            <returns>A 2-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream using big-endian encoding
            and advances the position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream using big-endian encoding
            and advances the position of the stream by four bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream using big-endian encoding
            and advances the position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte signed integer read from this stream.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream using big-endian encoding
            and advances the position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream using big-endian encoding
            and advances the position of the stream by four bytes.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream using big-endian encoding
            and advances the position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryReader.ReadDecimal">
            <summary>
            Reads an decimal value from the current stream using big-endian encoding
            and advances the position of the stream by sixteen bytes.
            </summary>
            <returns>A decimal value read from the current stream.</returns>
        </member>
        <member name="T:CoreExtensions.IO.BigEndianBinaryWriter">
            <summary>
            Writes primitive types in binary to a stream and supports writing strings in
            a specific encoding using big-endian methods.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreExtensions.IO.BigEndianBinaryWriter"/> class based on
            the specified stream and using UTF-8 encoding.
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreExtensions.IO.BigEndianBinaryWriter"/> class based on 
            the specified stream and character encoding.
            </summary>
            <param name="output">The output stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreExtensions.IO.BigEndianBinaryWriter"/> class based on 
            the specified stream and character encoding, and optionally leaves the stream open.
            </summary>
            <param name="output">The output stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="leaveOpen">true to leave the stream open after the 
            <see cref="T:CoreExtensions.IO.BigEndianBinaryWriter"/> object is disposed; otherwise, false.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer to the current stream using big-endian encoding 
            and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.Write(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer to the current stream using big-endian encoding
            and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer to the current stream using big-endian encoding
            and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.Write(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer to the current stream using big-endian encoding
            and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer to the current stream using big-endian encoding
            and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.Write(System.UInt64)">
            <summary>
            Writes an eight-byte unsigned integer to the current stream using big-endian encoding
            and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.Write(System.Single)">
            <summary>
            Writes a four-byte floating-point value to the current stream using 
            big-endian encodingand advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte floating-point value to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.Write(System.Double)">
            <summary>
            Writes an eight-byte floating-point value to the current stream using 
            big-endian encoding and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte floating-point value to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BigEndianBinaryWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal value to the current stream using big-endian encoding 
            and advances the stream position by sixteen bytes.
            </summary>
            <param name="value">The decimal value to write.</param>
        </member>
        <member name="T:CoreExtensions.IO.BinaryReaderX">
            <summary>
            Provides all major extensions for <see cref="T:System.IO.BinaryReader"/>
            </summary>
        </member>
        <member name="F:CoreExtensions.IO.BinaryReaderX._type_code_to_reader">
            <summary>
            Represents <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.TypeCode"/> and 
            <see cref="T:System.IO.BinaryReader"/> reading methods.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.IntPosition(System.IO.BinaryReader)">
            <summary>
            Position in the current stream as a 4-byte signed integer.
            </summary>
            <param name="br">This <see cref="T:System.IO.BinaryReader"/>.</param>
            <returns>Position of the stream as a 4-byte signed integer.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.IntLength(System.IO.BinaryReader)">
            <summary>
            Length in the current stream as a 4-byte signed integer.
            </summary>
            <param name="br">This <see cref="T:System.IO.BinaryReader"/>.</param>
            <returns>Length of the stream as a 4-byte signed integer.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.ReadReversedBytes(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads the specified number of bytes from the current stream into a byte array 
            in reverse order and advances the current position by that number of bytes.
            </summary>
            <param name="br"></param>
            <param name="count">The number of bytes to read. This value must be 0 or a 
            non-negative number or an exception will occur.</param>
            <returns>A byte array containing data read from the underlying stream. This might be 
            less than the number of bytes requested if the end of the stream is reached.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.ReadEnum``1(System.IO.BinaryReader)">
            <summary>
            Reads the <see cref="T:System.Enum"/> of type <typeparamref name="TypeID"/> and advances 
            the current position by the size of the underlying type of the <see cref="T:System.Enum"/>.
            </summary>
            <typeparam name="TypeID">Type of the <see cref="T:System.Enum"/> to read.</typeparam>
            <returns>Value of the <see cref="T:System.Enum"/> passed. If value could not be parsed, 
            or if the type passed is not Enum, exception might be thrown.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.ReadNullTermUTF8(System.IO.BinaryReader)">
            <summary>
            Reads a C-Style null-terminated string that using UTF8 encoding.
            </summary>
            <returns>String with UTF8 style encoding.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.ReadNullTermUTF16(System.IO.BinaryReader)">
            <summary>
            Reads a C-Style null-terminated string that using UTF16 encoding.
            </summary>
            <returns>String with UTF16 style encoding.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.ReadNullTermUTF8(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a C-Style null-terminated string that using UTF8 encoding.
            </summary>
            <param name="br"></param>
            <param name="length">Max length of the string to read.</param>
            <returns>String with UTF8 style encoding.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.ReadNullTermUTF16(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a C-Style null-terminated string that using UTF16 encoding.
            </summary>
            <param name="br"></param>
            <param name="length">Max length of the string to read.</param>
            <returns>String with UTF16 style encoding.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.ReadStruct``1(System.IO.BinaryReader,``0@)">
            <summary>
            Attempts to read struct of type <typeparamref name="TypeID"/>. In order for struct 
            to be read correctly, it should have a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"/>.
            </summary>
            <typeparam name="TypeID">Type of struct to read.</typeparam>
            <param name="br"></param>
            <param name="result">Result struct of type <typeparamref name="TypeID"/> that was read.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.SeekArray(System.IO.BinaryReader,System.Byte[],System.Boolean)">
            <summary>
            Seeks position of the first occurence of the byte array provided.
            </summary>
            <param name="br"></param>
            <param name="array">Byte array to find.</param>
            <param name="fromstart">True if begin seeking from the start of the stream; 
            false otherwise.</param>
            <returns>Position of the first occurence of the byte array. If array was not 
            found, returns -1.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.SeekValue``1(System.IO.BinaryReader,``0,System.Boolean)">
            <summary>
            Seeks position of the first occurence of the convertible value provided (value cannot 
            be string).
            </summary>
            <typeparam name="TypeID">Type of the value to find.</typeparam>
            <param name="br"></param>
            <param name="value">Value to find.</param>
            <param name="fromstart">True if begin seeking from the start of the stream; 
            false otherwise.</param>
            <returns>Position of the first occurence of the value provided.. If array was not 
            found, returns -1.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryReaderX.ReadUnmanaged``1(System.IO.BinaryReader)">
            <summary>
            Reads unmanaged value type.
            </summary>
            <typeparam name="T">Unmanaged type to read.</typeparam>
            <param name="br"></param>
            <returns>Instance of unmanaged type provided.</returns>
        </member>
        <member name="T:CoreExtensions.IO.BinaryWriterX">
            <summary>
            Provides all major extensions for <see cref="T:System.IO.BinaryWriter"/>
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.IntPosition(System.IO.BinaryWriter)">
            <summary>
            Position in the current stream as a 4-byte signed integer.
            </summary>
            <param name="bw">This <see cref="T:System.IO.BinaryWriter"/>.</param>
            <returns>Position of the stream as a 4-byte signed integer.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.IntLength(System.IO.BinaryWriter)">
            <summary>
            Length in the current stream as a 4-byte signed integer.
            </summary>
            <param name="bw">This <see cref="T:System.IO.BinaryWriter"/>.</param>
            <returns>Length of the stream as a 4-byte signed integer.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.WriteReversedBytes(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Writes a byte array to the underlying stream in reverse order.
            </summary>
            <param name="bw"></param>
            <param name="array">A byte array containing the data to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.WriteEnum``1(System.IO.BinaryWriter,``0)">
            <summary>
            Writes the <see cref="T:System.Enum"/> of type <typeparamref name="TypeID"/> and advances 
            the current position by the size of the underlying type of the <see cref="T:System.Enum"/>.
            </summary>
            <typeparam name="TypeID">Type of the <see cref="T:System.Enum"/> to read.</typeparam>
            <param name="bw"></param>
            <param name="value"><see cref="T:System.Enum"/> value to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.WriteNullTermUTF8(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes a C-Style null-terminated string that using UTF8 encoding.
            </summary>
            <param name="bw"></param>
            <param name="value">String value to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.WriteNullTermUTF16(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes a C-Style null-terminated string that using UTF16 encoding.
            </summary>
            <param name="bw"></param>
            <param name="value">String value to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.WriteNullTermUTF8(System.IO.BinaryWriter,System.String,System.Int32)">
            <summary>
            Writes a C-Style null-terminated string that using UTF8 encoding.
            </summary>
            <param name="bw"></param>
            <param name="value">String value to write.</param>
            <param name="length">Max length of the string to write; if length of the string 
            is less then length specified, padding will be added after it to fill buffer.</param>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.WriteNullTermUTF16(System.IO.BinaryWriter,System.String,System.Int32)">
            <summary>
            Writes a C-Style null-terminated string that using UTF16 encoding.
            </summary>
            <param name="bw"></param>
            <param name="value">String value to write.</param>
            <param name="length">Max length of the string to write; if length of the string 
            is less then length specified, padding will be added after it to fill buffer.</param>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.WriteStruct``1(System.IO.BinaryWriter,``0)">
            <summary>
            Attempts to write struct of type <typeparamref name="TypeID"/>. In order for struct 
            to be read correctly, it should have a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"/>.
            </summary>
            <typeparam name="TypeID">Type of struct to read.</typeparam>
            <param name="bw"></param>
            <param name="value">Struct of type <typeparamref name="TypeID"/> to write.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.FillBuffer(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Fills stream buffer till the certain padding is reached.
            </summary>
            <param name="bw"></param>
            <param name="align">Align to fill the stream buffer to.</param>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.WriteBytes(System.IO.BinaryWriter,System.Byte,System.Int32)">
            <summary>
            Writes amount of bytes specified.
            </summary>
            <param name="bw"></param>
            <param name="value">Byte value to write.</param>
            <param name="count">Amount of bytes to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.BinaryWriterX.WriteUnmanaged``1(System.IO.BinaryWriter,``0)">
            <summary>
            Writes unmanaged value type.
            </summary>
            <typeparam name="T">Unmanaged type to write.</typeparam>
            <param name="bw"></param>
            <param name="value">Instance of unmanaged type to write.</param>
        </member>
        <member name="T:CoreExtensions.IO.IniReader">
            <summary>
            Represents a disposable .ini files reader.
            </summary>
        </member>
        <member name="P:CoreExtensions.IO.IniReader.CommentDelimiter">
            <summary>
            Comment delimiter in the file.
            </summary>
        </member>
        <member name="P:CoreExtensions.IO.IniReader.ArraySeparator">
            <summary>
            Array of characters that separate array elements.
            </summary>
        </member>
        <member name="P:CoreExtensions.IO.IniReader.Length">
            <summary>
            Length of the stream.
            </summary>
        </member>
        <member name="P:CoreExtensions.IO.IniReader.Position">
            <summary>
            Position in the stream.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.IniReader.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:CoreExtensions.IO.IniReader"/> using file path provided.
            </summary>
            <param name="path">Path of the file to read.</param>
        </member>
        <member name="M:CoreExtensions.IO.IniReader.#ctor(System.IO.StreamReader)">
            <summary>
            Initializes new instance of <see cref="T:CoreExtensions.IO.IniReader"/> using <see cref="T:System.IO.StreamReader"/> 
            provided.
            </summary>
            <param name="reader"><see cref="T:System.IO.StreamReader"/> with opened file to read.</param>
        </member>
        <member name="M:CoreExtensions.IO.IniReader.ReadLine">
            <summary>
            Reads a line from the stream.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.IniReader.ReadAllLines">
            <summary>
            Reads all lines from the stream.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.IniReader.GetValue``1(System.String,System.String)">
            <summary>
            Gets value of type specified from category and property provided.
            </summary>
            <typeparam name="T">Type of the value to return.</typeparam>
            <param name="category">Category in the file to search in.</param>
            <param name="property">Property to get value from.</param>
            <returns>Value of a type specified.</returns>
        </member>
        <member name="M:CoreExtensions.IO.IniReader.GetArray``1(System.String,System.String)">
            <summary>
            Gets array of values of type specified from category and property provided.
            </summary>
            <typeparam name="T">Type of the values of the array to return.</typeparam>
            <param name="category">Category in the file to search in.</param>
            <param name="property">Property to get value from.</param>
            <returns>Array of values of a type specified.</returns>
        </member>
        <member name="M:CoreExtensions.IO.IniReader.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:CoreExtensions.IO.IniReader"/>.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.IniReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:CoreExtensions.IO.IniReader"/>.
            </summary>
            <param name="disposing">True if release both managed and unmanaged resources; false 
            if release unmanaged only.</param>
        </member>
        <member name="T:CoreExtensions.IO.Logger">
            <summary>
            A <see cref="T:System.IO.Stream"/> class to write logs and exception data.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.Logger.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:CoreExtensions.IO.Logger"/> that writes to a file specified.
            </summary>
            <param name="file">File to write to.</param>
        </member>
        <member name="M:CoreExtensions.IO.Logger.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of <see cref="T:CoreExtensions.IO.Logger"/> that writes to a file specified. 
            When initialized, writes introductory string to a file.
            </summary>
            <param name="file">File to write to.</param>
            <param name="intro">Introductory string to write on file opening.</param>
        </member>
        <member name="M:CoreExtensions.IO.Logger.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes new instance of <see cref="T:CoreExtensions.IO.Logger"/> that writes to a file specified. 
            When initialized, writes introductory string to a file with date and time.
            </summary>
            <param name="file">File to write to.</param>
            <param name="intro">Introductory string to write on file opening.</param>
            <param name="writedate">True if write date to a file; false otherwise.</param>
        </member>
        <member name="M:CoreExtensions.IO.Logger.Write(System.String)">
            <summary>
            Writes a string to a file.
            </summary>
            <param name="value">String value to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.Logger.WriteException(System.Exception)">
            <summary>
            Writes <see cref="T:System.Exception"/> details to a file.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.Logger.WriteException(System.Exception,System.IO.Stream)">
            <summary>
            Writes <see cref="T:System.Exception"/> details and <see cref="T:System.IO.Stream"/> position to a file.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> to write.</param>
            <param name="stream"><see cref="T:System.IO.Stream"/> which position should be written.</param>
        </member>
        <member name="M:CoreExtensions.IO.Logger.WriteException(System.Exception,System.Delegate)">
            <summary>
            Writes <see cref="T:System.Exception"/> details and <see cref="T:System.Delegate"/> info to a file.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> to write.</param>
            <param name="delegate"><see cref="T:System.Delegate"/> which information should be written.</param>
        </member>
        <member name="M:CoreExtensions.IO.Logger.WriteException(System.Exception,System.Delegate,System.IO.Stream)">
            <summary>
            Writes <see cref="T:System.Exception"/> details, <see cref="T:System.Delegate"/> info and 
            <see cref="T:System.IO.Stream"/> position to a file.
            </summary>
            <param name="exception"><see cref="T:System.Exception"/> to write.</param>
            <param name="delegate"><see cref="T:System.Delegate"/> which information should be written.</param>
            <param name="stream"><see cref="T:System.IO.Stream"/> which position should be written.</param>
        </member>
        <member name="M:CoreExtensions.IO.Logger.WriteLine(System.String)">
            <summary>
            Writes string value to a file and appends a newline to the end.
            </summary>
            <param name="value">String value to write.</param>
        </member>
        <member name="M:CoreExtensions.IO.Logger.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:CoreExtensions.IO.IniReader"/>.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.Logger.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:CoreExtensions.IO.IniReader"/>.
            </summary>
            <param name="disposing">True if release both managed and unmanaged resources; false 
            if release unmanaged only.</param>
        </member>
        <member name="T:CoreExtensions.IO.MemoryStreamX">
            <summary>
            Helper extensions for <see cref="T:System.IO.MemoryStream"/> and <see cref="T:System.IO.Stream"/> classes.
            </summary>
        </member>
        <member name="M:CoreExtensions.IO.MemoryStreamX.ReadBytes(CoreExtensions.Types.Pointer,System.Int32)">
            <summary>
            
            </summary>
            <param name="pointer"></param>
            <param name="numBytes"></param>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.IO.MemoryStreamX.MarshalArray``1(CoreExtensions.Types.Pointer,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pointer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.IO.MemoryStreamX.MarshalArray``1(CoreExtensions.Types.Pointer,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pointer"></param>
            <param name="length"></param>
            <param name="doubleIndirection"></param>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.IO.MemoryStreamX.MarshalStructure``1(CoreExtensions.Types.Pointer)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.IO.MemoryStreamX.MarshalClass``1(CoreExtensions.Types.Pointer)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.IO.MemoryStreamX.GetBuffer(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:CoreExtensions.Management.eRoundType">
            <summary>
            Specifies type of rounding values.
            </summary>
        </member>
        <member name="F:CoreExtensions.Management.eRoundType.Nearest">
            <summary>
            Specifies that value should be rounded to the nearest possible result.
            </summary>
        </member>
        <member name="F:CoreExtensions.Management.eRoundType.Up">
            <summary>
            Specifies that value should be rounded up to the closest matching result.
            </summary>
        </member>
        <member name="F:CoreExtensions.Management.eRoundType.Down">
            <summary>
            Specifies that value should be rounded down to the closest matching result.
            </summary>
        </member>
        <member name="T:CoreExtensions.Management.ExceptionX">
            <summary>
            Provides all major extensions for <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="M:CoreExtensions.Management.ExceptionX.GetLowestMessage(System.Exception)">
            <summary>
            Gets the innermost <see cref="T:System.Exception"/> message.
            </summary>
            <param name="e"><see cref="T:System.Exception"/> to analyze.</param>
            <returns>Innermost exception message as a string.</returns>
        </member>
        <member name="M:CoreExtensions.Management.ExceptionX.GetLowestHResult(System.Exception)">
            <summary>
            Gets the innermost <see cref="T:System.Exception"/> HResult.
            </summary>
            <param name="e"><see cref="T:System.Exception"/> to analyze.</param>
            <returns>Innermost exception HResult as a 4-byte integer.</returns>
        </member>
        <member name="M:CoreExtensions.Management.ExceptionX.GetLowestStackTrace(System.Exception)">
            <summary>
            Gets the innermost <see cref="T:System.Exception"/> StackTrace.
            </summary>
            <param name="e"><see cref="T:System.Exception"/> to analyze.</param>
            <returns>Innermost exception StackTrace as a string.</returns>
        </member>
        <member name="T:CoreExtensions.Management.ForcedX">
            <summary>
            Provides all major helper methods to force system thread.
            </summary>
        </member>
        <member name="M:CoreExtensions.Management.ForcedX.GCCollect">
            <summary>
            Forces <see cref="T:System.GC"/> to collect unused data.
            </summary>
        </member>
        <member name="T:CoreExtensions.Management.HelperX">
            <summary>
            Static helper class with methods.
            </summary>
        </member>
        <member name="M:CoreExtensions.Management.HelperX.Bound``1(``0,``0,``0)">
            <summary>
            Bounds value passed inbetween maximum and minimum limits.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of value to compare. This type should inherit 
            from <see cref="T:System.IComparable"/> interface.</typeparam>
            <param name="value">An <see cref="T:System.IComparable"/> value to bound.</param>
            <param name="min">Minimum value to bound to.</param>
            <param name="max">Maximum value to bound to.</param>
            <returns>Bound value passed.</returns>
        </member>
        <member name="M:CoreExtensions.Management.HelperX.RoundUpToPowerOfTwo(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.Management.HelperX.RoundDownToPowerOfTwo(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.Management.HelperX.RoundToNearestPowerOfTwo(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CoreExtensions.Native.ASMBuilder">
            <summary>
            Class to build ASM code based on operations given.
            </summary>
        </member>
        <member name="T:CoreExtensions.Native.ASMBuilder.ASMInstr">
            <summary>
            Class with all main opcodes used in ASM.
            </summary>
        </member>
        <member name="F:CoreExtensions.Native.ASMBuilder._asm">
            <summary>
            ASM code.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.#ctor">
            <summary>
            Initializes new instance of <see cref="T:CoreExtensions.Native.ASMBuilder"/> with default capacity 0x100.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.#ctor(System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:CoreExtensions.Native.ASMBuilder"/> with capacity specified.
            </summary>
            <param name="capacity">Initial capacity of the <see cref="T:CoreExtensions.Native.ASMBuilder"/>. 
            If the number is zero or negative, capacity will be defaulted to 0x100.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.Write(System.Byte[])">
            <summary>
            Writes ASM assembly.
            </summary>
            <param name="asm">ASM to write.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.Get">
            <summary>
            Gets generated ASM code.
            </summary>
            <returns>ASM as a byte array of opcodes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.IncEAX">
            <summary>
            Increments value at EAX registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.IncECX">
            <summary>
            Increments value at ECX registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.IncEDX">
            <summary>
            Increments value at EDX registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.IncEBX">
            <summary>
            Increments value at EBX registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.IncESP">
            <summary>
            Increments value at ESP registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.IncEBP">
            <summary>
            Increments value at EBP registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.IncESI">
            <summary>
            Increments value at ESI registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.IncEDI">
            <summary>
            Increments value at EDI registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.DecEAX">
            <summary>
            Decrements value at EAX registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.DecECX">
            <summary>
            Decrements value at ECX registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.DecEDX">
            <summary>
            Decrements value at EDX registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.DecEBX">
            <summary>
            Decrements value at EBX registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.DecESP">
            <summary>
            Decrements value at ESP registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.DecEBP">
            <summary>
            Decrements value at EBP registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.DecESI">
            <summary>
            Decrements value at ESI registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.DecEDI">
            <summary>
            Decrements value at EDI registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushEAX">
            <summary>
            Push ESI to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushECX">
            <summary>
            Push ECX to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushEDX">
            <summary>
            Push EDX to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushEBX">
            <summary>
            Push EBX to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushESP">
            <summary>
            Push ESP to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushEBP">
            <summary>
            Push EBP to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushESI">
            <summary>
            Push ESI to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushEDI">
            <summary>
            Push EDI to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PopEAX">
            <summary>
            Pop ESI to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PopECX">
            <summary>
            Pop ECX to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PopEDX">
            <summary>
            Pop EDX to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PopEBX">
            <summary>
            Pop EBX to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PopESP">
            <summary>
            Pop ESP to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PopEBP">
            <summary>
            Pop EBP to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PopESI">
            <summary>
            Pop ESI to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PopEDI">
            <summary>
            Pop EDI to the stack.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushBYTE(System.Byte)">
            <summary>
            Pushes byte to the stack.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushBYTE(System.SByte)">
            <summary>
            Pushes sbyte to the stack.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushWORD(System.Int16)">
            <summary>
            Pushes short to the stack.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushWORD(System.UInt16)">
            <summary>
            Pushes ushort to the stack.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushDWORD(System.Int32)">
            <summary>
            Pushes int to the stack.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushDWORD(System.UInt32)">
            <summary>
            Pushes uint to the stack.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushDWORD(System.Single)">
            <summary>
            Pushes float to the stack.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushQWORD(System.Double)">
            <summary>
            Pushes double to the stack.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToAL(System.SByte)">
            <summary>
            Move a value to the AL registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToAL(System.Byte)">
            <summary>
            Move a value to the AL registry
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToCL(System.SByte)">
            <summary>
            Move a value to the CL registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToCL(System.Byte)">
            <summary>
            Move a value to the CL registry
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToDL(System.SByte)">
            <summary>
            Move a value to the DL registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToDL(System.Byte)">
            <summary>
            Move a value to the DL registry
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToBL(System.SByte)">
            <summary>
            Move a value to the BL registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToBL(System.Byte)">
            <summary>
            Move a value to the BL registry
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToAH(System.SByte)">
            <summary>
            Move a value to the AH registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToAH(System.Byte)">
            <summary>
            Move a value to the AH registry
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToCH(System.SByte)">
            <summary>
            Move a value to the CH registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToCH(System.Byte)">
            <summary>
            Move a value to the CH registry
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToDH(System.SByte)">
            <summary>
            Move a value to the DH registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToDH(System.Byte)">
            <summary>
            Move a value to the DH registry
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToBH(System.SByte)">
            <summary>
            Move a value to the BH registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToBH(System.Byte)">
            <summary>
            Move a value to the BH registry
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEAX(System.Int32)">
            <summary>
            Move a value to the EAX registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEAX(System.UInt32)">
            <summary>
            Move a value to the EAX registry
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToECX(System.Int32)">
            <summary>
            Move a value to the ECX registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToECX(System.UInt32)">
            <summary>
            Move a value to the ECX registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEDX(System.Int32)">
            <summary>
            Move a value to the EDX registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEDX(System.UInt32)">
            <summary>
            Move a value to the EDX registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEBX(System.Int32)">
            <summary>
            Move a value to the EBX registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEBX(System.UInt32)">
            <summary>
            Move a value to the EBX registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToESP(System.Int32)">
            <summary>
            Move a value to the ESP registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToESP(System.UInt32)">
            <summary>
            Move a value to the ESP registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEBP(System.Int32)">
            <summary>
            Move a value to the EBP registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEBP(System.UInt32)">
            <summary>
            Move a value to the EBP registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToESI(System.Int32)">
            <summary>
            Move a value to the ESI registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToESI(System.UInt32)">
            <summary>
            Move a value to the ESI registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEDI(System.Int32)">
            <summary>
            Move a value to the EDI registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovToEDI(System.UInt32)">
            <summary>
            Move a value to the EDI registry.
            </summary>
            <param name="value">Value to move.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.CallEAX">
            <summary>
            Calls EAX registry.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushWORDPTRDS(System.Int32)">
            <summary>
            Pushes word value to PTR_DS.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.PushWORDPTRDS(System.UInt32)">
            <summary>
            Pushes word value to PTR_DS.
            </summary>
            <param name="value">Value to push.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.MovEAXToAddress(System.UInt32)">
            <summary>
            Move the value stored at EAX to an address.
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.AddToESP(System.Int32)">
            <summary>
            Adds a value to ESP.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.NOP(System.Int32)">
            <summary>
            Makes ranged NOP of size specified.
            </summary>
            <param name="size">Size of NOP operations.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.JMP(System.Int32)">
            <summary>
            JMP command.
            </summary>
            <param name="address">Address to jump to.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.JMP(System.UInt32)">
            <summary>
            JMP command.
            </summary>
            <param name="address">Address to jump to.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.Return">
            <summary>
            Calls retn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.RetWORD(System.Int16)">
            <summary>
            Calls return based on word passed.
            </summary>
            <param name="value">Value to make return based on.</param>
        </member>
        <member name="M:CoreExtensions.Native.ASMBuilder.RetWORD(System.UInt16)">
            <summary>
            Calls return based on word passed.
            </summary>
            <param name="value">Value to make return based on.</param>
        </member>
        <member name="T:CoreExtensions.Native.InjectResult">
            <summary>
            <see cref="T:System.Enum"/> that returns result of processing InjectorX methods.
            </summary>
        </member>
        <member name="F:CoreExtensions.Native.InjectResult.None">
            <summary>
            Indicates zero result.
            </summary>
        </member>
        <member name="F:CoreExtensions.Native.InjectResult.Success">
            <summary>
            Indicates ASM success.
            </summary>
        </member>
        <member name="F:CoreExtensions.Native.InjectResult.WritingFailed">
            <summary>
            Indicates that memory writing failed.
            </summary>
        </member>
        <member name="F:CoreExtensions.Native.InjectResult.InvalidSize">
            <summary>
            Indicates that value passed was of invalid size.
            </summary>
        </member>
        <member name="F:CoreExtensions.Native.InjectResult.RemoteThreadFailure">
            <summary>
            Indicates failure to create or gain access to a remote thread.
            </summary>
        </member>
        <member name="F:CoreExtensions.Native.InjectResult.AllocationFaliure">
            <summary>
            Indicates failure to allocate memory in the process.
            </summary>
        </member>
        <member name="F:CoreExtensions.Native.InjectResult.ByteCastFailure">
            <summary>
            Indicates that value passed could not be casted to a byte array.
            </summary>
        </member>
        <member name="T:CoreExtensions.Native.InjectorX">
            <summary>
            Class with methods of writing to thread memory.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.FindProcess(System.String)">
            <summary>
            Finds process in the system by name provided. The result process will be the 
            first one opened if there are multiple instances.
            </summary>
            <returns>Process with the name specified.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.GetHandle(System.Diagnostics.Process)">
            <summary>
            Gets hProcess handle from <see cref="T:System.Diagnostics.Process"/> provided.
            </summary>
            <param name="process"><see cref="T:System.Diagnostics.Process"/> to get handle from.</param>
            <returns>Pointer to the base address of the process.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.CloseHandle(System.IntPtr)">
            <summary>
            Closes hProcess handle with pointer provided.
            </summary>
            <param name="hProcess">Pointer to base address of a <see cref="T:System.Diagnostics.Process"/>.</param>
            <returns>Result of closing.</returns>
        </member>
        <member name="T:CoreExtensions.Native.InjectorX.InjectInstr">
            <summary>
            Represents <see cref="T:System.Enum"/> of all possible InjectorX instructions.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.ReadMemory(System.Diagnostics.Process,System.UInt32,System.Int32)">
            <summary>
            Reads memory of the <see cref="T:System.Diagnostics.Process"/> provided at the address specified.
            </summary>
            <param name="process">Process where read memory.</param>
            <param name="address">Address of the process at which memory reading should occur.</param>
            <param name="size">Amount of bytes to read.</param>
            <returns>Memory read as an array of bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.ReadMemory(System.IntPtr,System.UInt32,System.Int32)">
            <summary>
            Reads memory of the <see cref="T:System.Diagnostics.Process"/> provided at the address specified.
            </summary>
            <param name="hProcess">Pointer to process where read memory.</param>
            <param name="address">Address of the process at which memory reading should occur.</param>
            <param name="size">Amount of bytes to read.</param>
            <returns>Memory read as an array of bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.WriteMemory(System.Diagnostics.Process,System.UInt32,System.IConvertible)">
            <summary>
            Writes memory of an object passed to the process specified at the address provided.
            </summary>
            <param name="process">Process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="value"><see cref="T:System.IConvertible"/> to write.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.WriteMemory(System.IntPtr,System.UInt32,System.IConvertible)">
            <summary>
            Writes memory of an object passed to the process specified at the address provided.
            </summary>
            <param name="hProcess">Pointer to process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="value"><see cref="T:System.IConvertible"/> to write.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.WriteMemory(System.Diagnostics.Process,System.UInt32,System.Byte[])">
            <summary>
            Writes byte array passed to the process specified at the address provided.
            </summary>
            <param name="process">Process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="array">Byte array to write to memory.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.WriteMemory(System.IntPtr,System.UInt32,System.Byte[])">
            <summary>
            Writes byte array passed to the process specified at the address provided.
            </summary>
            <param name="hProcess">Pointer to process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="array">Byte array to write to memory..</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.ReturnValue(System.Diagnostics.Process,System.UInt32,System.Object)">
            <summary>
            Makes function at the specified address of the process provided return a 
            specific value passed.
            </summary>
            <param name="process">Process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="value">Value that function should return. This value should 
            be convertible to 4-byte unsigned integer type.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.ReturnValue(System.IntPtr,System.UInt32,System.Object)">
            <summary>
            Makes function at the specified address of the process provided return a 
            specific value passed.
            </summary>
            <param name="hProcess">Pointer to process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="value">Value that function should return. This value should 
            be convertible to 4-byte unsigned integer type.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.ReturnValue(System.Diagnostics.Process,System.UInt32,System.UInt32)">
            <summary>
            Makes function at the specified address of the process provided return a 
            specific value passed.
            </summary>
            <param name="process">Process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="value">Value that function should return.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.ReturnValue(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Makes function at the specified address of the process provided return a 
            specific value passed.
            </summary>
            <param name="hProcess">Pointer to process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="value">Value that function should return.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.MakeJMP(System.Diagnostics.Process,System.UInt32,System.UInt32)">
            <summary>
            Writes JMP instruction to the address provided in the process specified.
            </summary>
            <param name="process">Process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="function">Function to where JMP point.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.MakeJMP(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Writes JMP instruction to the address provided in the process specified.
            </summary>
            <param name="hProcess">Pointer to process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="function">Function to where JMP point.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.MakeCALL(System.Diagnostics.Process,System.UInt32,System.UInt32)">
            <summary>
            Writes CALL instruction to the address provided in the process specified.
            </summary>
            <param name="process">Process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="function">Function that should be called.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.MakeCALL(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Writes CALL instruction to the address provided in the process specified.
            </summary>
            <param name="hProcess">Pointer to process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="function">Function that should be called.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.MakeRETN(System.Diagnostics.Process,System.UInt32,System.UInt16)">
            <summary>
            Writes RETN instruction to the address provided in the process specified.
            </summary>
            <param name="process">Process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="size">Size of the return. 0 by default.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.MakeRETN(System.IntPtr,System.UInt32,System.UInt16)">
            <summary>
            Writes RETN instruction to the address provided in the process specified.
            </summary>
            <param name="hProcess">Pointer to process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="size">Size of the return. 0 by default.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.MakeNOP(System.Diagnostics.Process,System.UInt32,System.Int32)">
            <summary>
            Writes NOP instructions to the address provided in the process specified.
            </summary>
            <param name="process">Process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="size">Size of the NOP.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="M:CoreExtensions.Native.InjectorX.MakeNOP(System.IntPtr,System.UInt32,System.Int32)">
            <summary>
            Writes NOP instructions to the address provided in the process specified.
            </summary>
            <param name="hProcess">Pointer to process where write memory.</param>
            <param name="address">Address of the process at which memory writing should occur.</param>
            <param name="size">Size of the NOP.</param>
            <returns><see cref="T:CoreExtensions.Native.InjectResult"/> of the memory writing.</returns>
        </member>
        <member name="T:CoreExtensions.Native.NativeArray`1">
            <summary>
            An array with elements of unmanaged type provided that allocates memory on a native heap, i.e.
            with no GC.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CoreExtensions.Native.NativeArray`1.#ctor(System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:CoreExtensions.Native.NativeArray`1"/> with size and element type specified.
            After array is about to be destroyed, <see cref="M:CoreExtensions.Native.NativeArray`1.Free"/> should be called to release natively
            allocated buffer.
            </summary>
            <param name="size">Size of array to allocate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Size of allocation passed is less or 
            equals zero.</exception>
        </member>
        <member name="P:CoreExtensions.Native.NativeArray`1.Item(System.Int32)">
            <summary>
            Gets or sets element at index specified.
            </summary>
            <param name="index">Index of an element to get or set.</param>
            <returns>Element at index specified.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index specified is out of range of array.</exception>
        </member>
        <member name="M:CoreExtensions.Native.NativeArray`1.Get(System.Int32)">
            <summary>
            Gets element at index specified.
            </summary>
            <param name="index">Index of an element to get.</param>
            <returns>Element at index specified.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index specified is out of range of array.</exception>
        </member>
        <member name="M:CoreExtensions.Native.NativeArray`1.Set(System.Int32,`0)">
            <summary>
            Sets element at index specified.
            </summary>
            <param name="index">Index of an element to set.</param>
            <param name="value">Value to set at index specified.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index specified is out of range of array.</exception>
        </member>
        <member name="M:CoreExtensions.Native.NativeArray`1.GetUnsafe(System.Int32)">
            <summary>
            Gets element at index specified without bound checks. Faster than regular <see cref="M:CoreExtensions.Native.NativeArray`1.Get(System.Int32)"/>,
            but unsafe and can overflow length of the array. Does not throw.
            </summary>
            <param name="index">Index of an element to set.</param>
            <returns>Element at index specified.</returns>
        </member>
        <member name="M:CoreExtensions.Native.NativeArray`1.SetUnsafe(System.Int32,`0)">
            <summary>
            Sets element at index specified without bound checks. Faster than regular <see cref="M:CoreExtensions.Native.NativeArray`1.Set(System.Int32,`0)"/>,
            but unsafe and can overflow length of the array. Does not throw.
            </summary>
            <param name="index">Index of an element to set.</param>
            <param name="value">Value to set at index specified.</param>
        </member>
        <member name="M:CoreExtensions.Native.NativeArray`1.GetPointer">
            <summary>
            Gets pointer of type <typeparamref name="T"/> to the beginning of allocated array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreExtensions.Native.NativeArray`1.Free">
            <summary>
            Frees/releases this <see cref="T:CoreExtensions.Native.NativeArray`1"/> instance. This should be called when array
            is not needed anymore or before it goes out of local range.
            </summary>
        </member>
        <member name="T:CoreExtensions.Native.NativeCallerX">
            <summary>
            Class with methods of calling native functions.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.NativeCallerX.AllocConsole">
            <summary>
            Allocates console for the current process.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.NativeCallerX.FreeConsole">
            <summary>
            Deallocates console for the current process.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.NativeCallerX.GetCurrentThreadID">
            <summary>
            Gets ID of the current thread.
            </summary>
            <returns>ID as a 4-byte signed integer value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.NativeCallerX.TerminateThread(System.Threading.Thread)">
            <summary>
            Terminates <see cref="T:System.Threading.Thread"/> specified.
            </summary>
            <param name="thread"><see cref="T:System.Threading.Thread"/> to terminate.</param>
            <returns><see langword="true"/> if thread was successfully terminated; 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:CoreExtensions.Native.NativeCallerX.TerminateThread(System.Int32)">
            <summary>
            Terminates <see cref="T:System.Threading.Thread"/> with ID specified.
            </summary>
            <param name="id">ID of the <see cref="T:System.Threading.Thread"/> to terminate.</param>
            <returns><see langword="true"/> if thread was successfully terminated; 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:CoreExtensions.Native.PointerX">
            <summary>
            Provides all major extensions for changing internal byte values of integer types.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOBYTE(System.Int16,System.Byte)">
            <summary>
            Changes lower (first) byte of the 2-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) byte of the 2-byte 
            signed integer.</param>
            <returns>New 2-byte signed integer with replaced lower (first) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOBYTE(System.UInt16,System.Byte)">
            <summary>
            Changes lower (first) byte of the 2-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) byte of the 2-byte 
            unsigned integer.</param>
            <returns>New 2-byte unsigned integer with replaced lower (first) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOBYTE(System.Int32,System.Byte)">
            <summary>
            Changes lower (first) byte of the 4-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) byte of the 4-byte 
            signed integer.</param>
            <returns>New 4-byte signed integer with replaced lower (first) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOBYTE(System.UInt32,System.Byte)">
            <summary>
            Changes lower (first) byte of the 4-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) byte of the 4-byte 
            unsigned integer.</param>
            <returns>New 4-byte unsigned integer with replaced lower (first) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOBYTE(System.Int64,System.Byte)">
            <summary>
            Changes lower (first) byte of the 8-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) byte of the 8-byte 
            signed integer.</param>
            <returns>New 8-byte signed integer with replaced lower (first) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOBYTE(System.UInt64,System.Byte)">
            <summary>
            Changes lower (first) byte of the 8-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) byte of the 8-byte 
            unsigned integer.</param>
            <returns>New 8-byte unsigned integer with replaced lower (first) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIBYTE(System.Int16,System.Byte)">
            <summary>
            Changes higher (second) byte of the 2-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) byte of the 2-byte 
            signed integer.</param>
            <returns>New 2-byte signed integer with replaced higher (second) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIBYTE(System.UInt16,System.Byte)">
            <summary>
            Changes higher (second) byte of the 2-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) byte of the 2-byte 
            unsigned integer.</param>
            <returns>New 2-byte unsigned integer with replaced higher (second) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIBYTE(System.Int32,System.Byte)">
            <summary>
            Changes higher (second) byte of the 4-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) byte of the 4-byte 
            signed integer.</param>
            <returns>New 4-byte signed integer with replaced higher (second) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIBYTE(System.UInt32,System.Byte)">
            <summary>
            Changes higher (second) byte of the 4-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) byte of the 4-byte 
            unsigned integer.</param>
            <returns>New 4-byte unsigned integer with replaced higher (second) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIBYTE(System.Int64,System.Byte)">
            <summary>
            Changes higher (second) byte of the 8-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) byte of the 8-byte 
            signed integer.</param>
            <returns>New 8-byte signed integer with replaced higher (second) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIBYTE(System.UInt64,System.Byte)">
            <summary>
            Changes higher (second) byte of the 8-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) byte of the 8-byte 
            unsigned integer.</param>
            <returns>New 8-byte unsigned integer with replaced higher (second) byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOWORD(System.Int32,System.Int16)">
            <summary>
            Changes lower (first) 2 bytes of the 4-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) 2 bytes of the 4-byte 
            signed integer.</param>
            <returns>New 4-byte signed integer with replaced lower (first) 2 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOWORD(System.UInt32,System.Int16)">
            <summary>
            Changes lower (first) 2 bytes of the 4-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) 2 bytes of the 4-byte 
            unsigned integer.</param>
            <returns>New 4-byte unsigned integer with replaced lower (first) 2 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOWORD(System.Int64,System.Int16)">
            <summary>
            Changes lower (first) 2 bytes of the 8-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) 2 bytes of the 8-byte 
            signed integer.</param>
            <returns>New 8-byte signed integer with replaced lower (first) 2 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LOWORD(System.UInt64,System.Int16)">
            <summary>
            Changes lower (first) 2 bytes of the 8-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) 2 bytes of the 8-byte 
            unsigned integer.</param>
            <returns>New 8-byte unsigned integer with replaced lower (first) 2 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIWORD(System.Int32,System.Int16)">
            <summary>
            Changes higher (second) 2 bytes of the 4-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) 2 bytes of the 4-byte 
            signed integer.</param>
            <returns>New 4-byte signed integer with replaced higher (second) 2 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIWORD(System.UInt32,System.Int16)">
            <summary>
            Changes higher (second) 2 bytes of the 4-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) 2 bytes of the 4-byte 
            unsigned integer.</param>
            <returns>New 4-byte unsigned integer with replaced higher (second) 2 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIWORD(System.Int64,System.Int16)">
            <summary>
            Changes higher (second) 2 bytes of the 8-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) 2 bytes of the 8-byte 
            signed integer.</param>
            <returns>New 8-byte signed integer with replaced higher (second) 2 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIWORD(System.UInt64,System.Int16)">
            <summary>
            Changes higher (second) 2 bytes of the 8-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) 2 bytes of the 8-byte 
            unsigned integer.</param>
            <returns>New 8-byte unsigned integer with replaced higher (second) 2 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LODWORD(System.Int64,System.Int32)">
            <summary>
            Changes lower (first) 4 bytes of the 8-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) 4 bytes of the 8-byte 
            signed integer.</param>
            <returns>New 8-byte signed integer with replaced lower (first) 4 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.LODWORD(System.UInt64,System.Int32)">
            <summary>
            Changes lower (first) 4 bytes of the 8-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces lower (first) 4 bytes of the 8-byte 
            unsigned integer.</param>
            <returns>New 8-byte unsigned integer with replaced lower (first) 4 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIDWORD(System.Int64,System.Int32)">
            <summary>
            Changes higher (second) 4 bytes of the 8-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) 4 bytes of the 8-byte 
            signed integer.</param>
            <returns>New 8-byte signed integer with replaced higher (second) 4 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.HIDWORD(System.UInt64,System.Int32)">
            <summary>
            Changes higher (second) 4 bytes of the 8-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces higher (second) 4 bytes of the 8-byte 
            nnsigned integer.</param>
            <returns>New 8-byte unsigned integer with replaced higher (second) 4 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.BYTEn(System.Int32,System.Byte,System.Int32)">
            <summary>
            Changes n-th byte of the 4-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces n-th byte of the 4-byte signed integer.</param>
            <param name="pos">Position of the byte to replace.</param>
            <returns>New 4-byte signed integer with replaced n-th byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.BYTEn(System.UInt32,System.Byte,System.Int32)">
            <summary>
            Changes n-th byte of the 4-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces n-th byte of the 4-byte unsigned integer.</param>
            <param name="pos">Position of the byte to replace.</param>
            <returns>New 4-byte unsigned integer with replaced n-th byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.BYTEn(System.Int64,System.Byte,System.Int32)">
            <summary>
            Changes n-th byte of the 8-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces n-th byte of the 8-byte signed integer.</param>
            <param name="pos">Position of the byte to replace.</param>
            <returns>New 8-byte signed integer with replaced n-th byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.BYTEn(System.UInt64,System.Byte,System.Int32)">
            <summary>
            Changes n-th byte of the 8-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces n-th byte of the 8-byte unsigned integer.</param>
            <param name="pos">Position of the byte to replace.</param>
            <returns>New 8-byte unsigned integer with replaced n-th byte.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.WORDn(System.Int64,System.Int16,System.Int32)">
            <summary>
            Changes n-th 2 bytes of the 8-byte signed integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces n-th 2 bytes of the 8-byte 
            signed integer.</param>
            <param name="pos">Position of the 2 bytes to replace.</param>
            <returns>New 8-byte signed integer with replaced n-th 2 bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Native.PointerX.WORDn(System.UInt64,System.Int16,System.Int32)">
            <summary>
            Changes n-th 2 bytes of the 8-byte unsigned integer.
            </summary>
            <param name="num"></param>
            <param name="value">Value that replaces n-th 2 bytes of the 8-byte 
            unsigned integer.</param>
            <param name="pos">Position of the 2 bytes to replace.</param>
            <returns>New 8-byte unsigned integer with replaced n-th 2 bytes.</returns>
        </member>
        <member name="T:CoreExtensions.Native.ReverseX">
            <summary>
            Provides all major extensions for reversing (endian-swapping) primitive values.
            </summary>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.Int16)">
            <summary>
            Reverses (endian-swaps) a 2-byte signed integer value.
            </summary>
            <param name="value">A 2-byte signed integer value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 2-byte signed integer value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.UInt16)">
            <summary>
            Reverses (endian-swaps) a 2-byte unsigned integer value.
            </summary>
            <param name="value">A 2-byte unsigned integer value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 2-byte unsigned integer value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.Char)">
            <summary>
            Reverses (endian-swaps) a 2-byte char value.
            </summary>
            <param name="value">A 2-byte char value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 2-byte char value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.Int32)">
            <summary>
            Reverses (endian-swaps) a 4-byte signed integer value.
            </summary>
            <param name="value">A 4-byte signed integer value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 4-byte signed integer value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.UInt32)">
            <summary>
            Reverses (endian-swaps) a 4-byte unsigned integer value.
            </summary>
            <param name="value">A 4-byte unsigned integer value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 4-byte unsigned integer value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.Single)">
            <summary>
            Reverses (endian-swaps) a 4-byte floating point value.
            </summary>
            <param name="value">A 4-byte floating point value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 4-byte floating point value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.Int64)">
            <summary>
            Reverses (endian-swaps) an 8-byte signed integer value.
            </summary>
            <param name="value">An 8-byte signed integer value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 8-byte signed integer value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.UInt64)">
            <summary>
            Reverses (endian-swaps) an 8-byte unsigned integer value.
            </summary>
            <param name="value">An 8-byte unsigned integer value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 8-byte unsigned integer value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.Double)">
            <summary>
            Reverses (endian-swaps) an 8-byte floating point value.
            </summary>
            <param name="value">An 8-byte floating point value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 8-byte floating point value.</returns>
        </member>
        <member name="M:CoreExtensions.Native.ReverseX.Reverse(System.Decimal)">
            <summary>
            Reverses (endian-swaps) a 16-byte floating point value.
            </summary>
            <param name="value">A 16-byte floating point value to reverse (endian-swap).</param>
            <returns>Reversed (endian-swapped) 16-byte floating point value.</returns>
        </member>
        <member name="T:CoreExtensions.Reflection.PropertyInfoX">
            <summary>
            Provides all major extensions for <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="M:CoreExtensions.Reflection.PropertyInfoX.IsIEnumerableType(System.Reflection.PropertyInfo)">
            <summary>
            Checks if the property is of <see cref="T:System.Collections.IEnumerable"/> type.
            </summary>
            <param name="property">Property to check.</param>
            <returns>True if property is of <see cref="T:System.Collections.IEnumerable"/> type; false otherwise.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.PropertyInfoX.IsPropertyOfEnumType(System.Object,System.String)">
            <summary>
            Checks if the property is of <see cref="T:System.Enum"/> type.
            </summary>
            <param name="obj">Object to check.</param>
            <param name="property">Name of the property to check.</param>
            <returns>True if property is enum; false otherwise.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.PropertyInfoX.GetPropertyEnumerableTypes(System.Object,System.String)">
            <summary>
            Returns all <see cref="T:System.Enum"/> names of the property provided.
            </summary>
            <param name="obj">Object to parse.</param>
            <param name="property">Name of the enumerable property.</param>
            <returns>Array of strings.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.PropertyInfoX.GetFastProperty(System.Object,System.String)">
            <summary>
            Gets <see cref="T:System.Reflection.PropertyInfo"/> of the object by name provided.
            </summary>
            <param name="obj">Object to parse.</param>
            <param name="name">Name of the <see cref="T:System.Reflection.PropertyInfo"/> to get.</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> with the name provided.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.PropertyInfoX.GetFastPropertyValue(System.Object,System.String)">
            <summary>
            Gets value of <see cref="T:System.Reflection.PropertyInfo"/> of the object by name provided.
            </summary>
            <param name="obj">Object to parse.</param>
            <param name="name">Name of the <see cref="T:System.Reflection.PropertyInfo"/> to get value from.</param>
            <returns>Value of the <see cref="T:System.Reflection.PropertyInfo"/> with the name provided.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.PropertyInfoX.GetFastMethod(System.Reflection.PropertyInfo,System.String,System.Type[])">
            <summary>
            Gets method of <see cref="T:System.Reflection.PropertyInfo"/> of the object by names and types provided.
            </summary>
            <param name="property">This property to get method from.</param>
            <param name="method">Name of the method to get.</param>
            <param name="args">Argument types of the method.</param>
            <returns>MethodInfo found from arguments passed.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.PropertyInfoX.GetFastMethod(System.Object,System.String,System.String,System.Type[])">
            <summary>
            Gets method of <see cref="T:System.Reflection.PropertyInfo"/> of the object by names and types provided.
            </summary>
            <param name="obj">Object to parse.</param>
            <param name="property">This property to get method from.</param>
            <param name="method">Name of the method to get.</param>
            <param name="args">Argument types of the method.</param>
            <returns>MethodInfo found from arguments passed.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.PropertyInfoX.FastMethodInvoke(System.Reflection.PropertyInfo,System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes method found by method name, object and property info passed.
            </summary>
            <param name="property">This property to get method from.</param>
            <param name="obj">Object to parse.</param>
            <param name="method">Name of the method to get.</param>
            <param name="args">Argument types of the method.</param>
            <param name="attr">Arguments passed to the invokable method.</param>
            <returns>Result object from invokation of a method.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.PropertyInfoX.FastMethodInvoke(System.Object,System.String,System.String,System.Type[],System.Object[])">
            <summary>
            Invokes method found by method name, object and property info passed.
            </summary>
            <param name="obj">Object to parse.</param>
            <param name="property">Name of the property to get.</param>
            <param name="method">Name of the method to get.</param>
            <param name="args">Argument types of the method.</param>
            <param name="attr">Arguments passed to the invokable method.</param>
            <returns>Result object from invokation of a method.</returns>
        </member>
        <member name="T:CoreExtensions.Reflection.TypeX">
            <summary>
            Provides all major extensions for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:CoreExtensions.Reflection.TypeX.IsFromGenericInterface(System.Type,System.Type)">
            <summary>
            Check whether given <see cref="T:System.Type"/> is inherited from specified generic 
            interface.
            </summary>
            <param name="thistype"></param>
            <param name="intertype"><see cref="T:System.Type"/> of generic interface to check.</param>
            <returns>True if given type is inherited from specified generic interface; 
            false otherwise.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.TypeX.IsFromGenericClass(System.Type,System.Type)">
            <summary>
            Check whether given <see cref="T:System.Type"/> is inherited from specified generic 
            class.
            </summary>
            <param name="thistype"></param>
            <param name="classtype"><see cref="T:System.Type"/> of generic class to check.</param>
            <returns>True if given type is inherited from specified generic class; 
            false otherwise.</returns>
        </member>
        <member name="M:CoreExtensions.Reflection.TypeX.IsGenericItself(System.Type,System.Type)">
            <summary>
            Checks whether given <see cref="T:System.Type"/> is a generic definition itself.
            </summary>
            <param name="giventype"></param>
            <param name="generictype"><see cref="T:System.Type"/> of generic class to check.</param>
            <returns>True if given type is a generic definition itself; false otherwise.</returns>
        </member>
        <member name="T:CoreExtensions.Text.RegX">
            <summary>
            Provides all major extensions for <see cref="T:System.Text.RegularExpressions.Regex"/> and <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CoreExtensions.Text.RegX.IsHexString(System.String)">
            <summary>
            Determines whether given string can be a hexadecimal digit of type 0x[...].
            </summary>
            <returns>True if string can be a hexadecimal digit; false otherwise.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.TryHexStringToUInt32(System.String,System.UInt32@)">
            <summary>
            Attempts to convert hexadecimal string to an unsigned integer value. Hexadecimal
            string should start with '0x' or '0X' value.
            </summary>
            <param name="value">String value to attempt to parse.</param>
            <param name="result">Unsigned integer value converted from the string value passed.</param>
            <returns>True if conversion was successful; false if string was not a hexadecimal
            string and/or contained characters that could not be converted.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.FastToHexString(System.UInt32,System.Boolean)">
            <summary>
            Converts unsigned integer passed to its hexadecimal string representation that
            starts with '0x'. Faster than <see cref="M:System.UInt32.ToString"/>.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="toLower">True if all 'a'-'f' characters should be lowercase in the
            string representation; false if all 'A'-'F' should be uppercase instead.</param>
            <returns>Hexadecimal string representation of an unsigned integer value.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.GetQuotedString(System.String)">
            <summary>
            Gets first quoted string from the given string.
            </summary>
            <returns>First quoted string.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.SmartSplitString(System.String)">
            <summary>
            Splits string by whitespace and quotation marks.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.GetBytes(System.String)">
            <summary>
            Gets array of bytes of from the current string provided.
            </summary>
            <param name="value">String to convert to array of bytes.</param>
            <returns>Array of bytes of the string.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.GetString(System.Byte[])">
            <summary>
            Gets string from array of bytes using UTF8 encoding.
            </summary>
            <param name="array">Array of bytes to convert to string.</param>
            <returns>String from array of bytes.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.GetSafeHashCode(System.String)">
            <summary>
            Gets HashCode of the string; if string is null, returns String.Empty HashCode.
            </summary>
            <param name="value"></param>
            <returns>HashCode of the string.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.ToObject``1(System.Byte[])">
            <summary>
            Returns object of type <typeparamref name="TypeID"/> from the byte array provided.
            </summary>
            <param name="array">Array of bytes to convert.</param>
            <returns>Object of type <typeparamref name="TypeID"/>.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.GetMemory(System.IConvertible)">
            <summary>
            Gets memory of object of type <see cref="T:System.IConvertible"/> as a byte array.
            </summary>
            <param name="value">Value which memory should be returned.</param>
            <returns>Memory of the value passed as a byte array.</returns>
        </member>
        <member name="M:CoreExtensions.Text.RegX.SplitByLength(System.String,System.Int32)">
            <summary>
            Splits string into substrings with length specified.
            </summary>
            <param name="str">This string to split.</param>
            <param name="size">Size of each splitted substring.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of substrings.</returns>
        </member>
        <member name="T:CoreExtensions.Types.Pointer">
            <summary>
            A universal pointer type that is implicitly convertible to and from any primitive type.
            </summary>
        </member>
        <member name="F:CoreExtensions.Types.Pointer.Zero">
            <summary>
            A <see langword="static"/> <see cref="T:CoreExtensions.Types.Pointer"/> value with address 0.
            </summary>
        </member>
        <member name="P:CoreExtensions.Types.Pointer.Size">
            <summary>
            Gets the size of this instance, which is 4 bytes.
            </summary>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.IsNull">
            <summary>
            Checks whether pointer of this instance is 0.
            </summary>
            <returns><see langword="true"/> if pointer of this instance is 0; otherwise, 
            <see langword="false"/>.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Void*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to an unspecified type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Boolean*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to an boolean type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Byte*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to an unsigned 8-bit integer type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.SByte*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to a signed 8-bit integer type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Int16*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to a signed 16-bit integer type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.UInt16*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to an unsigned 16-bit integer type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Int32*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to a signed 32-bit integer type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.UInt32*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to an unsigned 32-bit integer type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Int64*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to a signed 64-bit integer type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.UInt64*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to an unsigned 64-bit integer type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Single*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to a 32-bit floating point type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Double*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to a 64-bit floating point type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Decimal*)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the pointer specified.
            </summary>
            <param name="ptr">A pointer to a 128-bit floating point type.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the <see cref="T:System.IntPtr"/> specified.
            </summary>
            <param name="ptr"><see cref="T:System.IntPtr"/> to initialize with.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.UIntPtr)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the <see cref="T:System.UIntPtr"/> specified.
            </summary>
            <param name="ptr"><see cref="T:System.UIntPtr"/> to initialize with.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the specified 32-bit 
            signed pointer or handle.
            </summary>
            <param name="address">A pointer or handle contained in a 32-bit signed integer.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the specified 32-bit 
            unsigned pointer or handle.
            </summary>
            <param name="address">A pointer or handle contained in a 32-bit unsigned integer.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the specified 64-bit 
            signed pointer or handle.
            </summary>
            <param name="address">A pointer or handle contained in a 64-bit signed integer.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of <see cref="T:CoreExtensions.Types.Pointer"/> using the specified 64-bit 
            unsigned pointer or handle.
            </summary>
            <param name="address">A pointer or handle contained in a 64-bit unsigned integer.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with the data needed to serialize 
            the current <see cref="T:CoreExtensions.Types.Pointer"/> object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object to populate with data.</param>
            <param name="context">The destination for this serialization. (This parameter is 
            not used; specify <see langword="null" />.)</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance or <see langword="null" />.</param>
            <returns><see langword="true"/> if object is an instance of <see cref="T:CoreExtensions.Types.Pointer"/> 
            and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.ToString">
            <summary>
            Converts the numeric value of the current <see cref="T:CoreExtensions.Types.Pointer"/> object to its 
            equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.ToString(System.String)">
            <summary>
            Converts the numeric value of the current <see cref="T:CoreExtensions.Types.Pointer"/> object to its 
            equivalent string representation.
            </summary>
            <param name="format">A format specification that governs how the current 
            <see cref="T:CoreExtensions.Types.Pointer"/> object is converted.</param>
            <returns>The string representation of the value of the current <see cref="T:CoreExtensions.Types.Pointer"/> object.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Void*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of unspecified type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Boolean*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of boolean type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Byte*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 8-bit unsigned integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.SByte*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 8-bit signed integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Int16*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 16-bit signed integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.UInt16*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 16-bit unsigned integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Int32*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 32-bit signed integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.UInt32*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 32-bit unsigned integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Int64*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 64-bit signed integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.UInt64*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 64-bit unsigned integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Single*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 32-bit floating point type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Double*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 64-bit floating point type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Decimal*">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a pointer of 128-bit floating point type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Boolean">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a boolean type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Byte">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to an 8-bit unsigned integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.SByte">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to an 8-bit signed integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Int16">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a 16-bit signed integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.UInt16">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a 16-bit unsigned integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Int32">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a 32-bit signed integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.UInt32">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a 32-bit unsigned integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Int64">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a 64-bit signed integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.UInt64">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a 64-bit unsigned integer type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Single">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a 32-bit floating point type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Double">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a 64-bit floating point type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.Decimal">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> instance to a 128-bit floating point type.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.IntPtr">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> to a <see cref="T:System.IntPtr"/> instance.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(CoreExtensions.Types.Pointer)~System.UIntPtr">
            <summary>
            Converts this <see cref="T:CoreExtensions.Types.Pointer"/> to a <see cref="T:System.UIntPtr"/> instance.
            </summary>
            <param name="ptr"><see cref="T:CoreExtensions.Types.Pointer"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Void*)~CoreExtensions.Types.Pointer">
            <summary>
            Converts pointer to an unspecified type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Boolean*)~CoreExtensions.Types.Pointer">
            <summary>
            Converts pointer to a boolean type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Byte*)~CoreExtensions.Types.Pointer">
            <summary>
            Converts pointer to an 8-bit unsigned integer type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.SByte*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to an 8-bit signed integer to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Int16*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to a 16-bit signed integer type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.UInt16*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to a 16-bit unsigned integer type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Int32*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to a 32-bit signed integer type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.UInt32*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to a 32-bit unsigned integer type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Int64*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to a 64-bit signed integer type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.UInt64*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to a 64-bit unsigned integer type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Single*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to a 32-bit floating point type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Double*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to a 64-bit floating point type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Decimal*)~CoreExtensions.Types.Pointer">
            <summary>
            Convert pointer to a 128-bit floating point type to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr">Pointer to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.IntPtr)~CoreExtensions.Types.Pointer">
            <summary>
            Converts <see cref="T:System.IntPtr"/> instance to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr"><see cref="T:System.IntPtr"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.UIntPtr)~CoreExtensions.Types.Pointer">
            <summary>
            Converts <see cref="T:System.UIntPtr"/> instance to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="ptr"><see cref="T:System.UIntPtr"/> to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Int32)~CoreExtensions.Types.Pointer">
            <summary>
            Converts a 32-bit signed integer address to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="address">Address to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.UInt32)~CoreExtensions.Types.Pointer">
            <summary>
            Converts a 32-bit unsigned integer address to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="address">Address to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.Int64)~CoreExtensions.Types.Pointer">
            <summary>
            Converts a 64-bit signed integer address to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="address">Address to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Implicit(System.UInt64)~CoreExtensions.Types.Pointer">
            <summary>
            Converts a 64-bit unsigned integer address to a <see cref="T:CoreExtensions.Types.Pointer"/> instance.
            </summary>
            <param name="address">Address to convert.</param>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Equality(CoreExtensions.Types.Pointer,CoreExtensions.Types.Pointer)">
            <summary>
            Determines whether two specified instances of <see cref="T:CoreExtensions.Types.Pointer"/> are equal.
            </summary>
            <param name="ptr1">The first pointer or handle to compare.</param>
            <param name="ptr2">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if first pointer equals second pointer; 
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Inequality(CoreExtensions.Types.Pointer,CoreExtensions.Types.Pointer)">
            <summary>
            Determines whether two specified instances of <see cref="T:CoreExtensions.Types.Pointer"/> are not equal.
            </summary>
            <param name="ptr1">The first pointer or handle to compare.</param>
            <param name="ptr2">The second pointer or handle to compare.</param>
            <returns><see langword="true"/> if first pointer does not equal second pointer; 
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Addition(CoreExtensions.Types.Pointer,System.Int32)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <param name="ptr">The pointer to add the address to.</param>
            <param name="address">The address to add.</param>
            <returns>A new pointer that reflects the addition of address to pointer.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Addition(CoreExtensions.Types.Pointer,System.UInt32)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <param name="ptr">The pointer to add the address to.</param>
            <param name="address">The address to add.</param>
            <returns>A new pointer that reflects the addition of address to pointer.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Addition(CoreExtensions.Types.Pointer,System.Int64)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <param name="ptr">The pointer to add the address to.</param>
            <param name="address">The address to add.</param>
            <returns>A new pointer that reflects the addition of address to pointer.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Addition(CoreExtensions.Types.Pointer,System.UInt64)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <param name="ptr">The pointer to add the address to.</param>
            <param name="address">The address to add.</param>
            <returns>A new pointer that reflects the addition of address to pointer.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Subtraction(CoreExtensions.Types.Pointer,System.Int32)">
            <summary>
            Subtracts an address from the value of a pointer.
            </summary>
            <param name="ptr">The pointer to subtract the offset from.</param>
            <param name="address">The address to subtract.</param>
            <returns>A new pointer that reflects the subtraction of address from pointer.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Subtraction(CoreExtensions.Types.Pointer,System.UInt32)">
            <summary>
            Subtracts an address from the value of a pointer.
            </summary>
            <param name="ptr">The pointer to subtract the offset from.</param>
            <param name="address">The address to subtract.</param>
            <returns>A new pointer that reflects the subtraction of address from pointer.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Subtraction(CoreExtensions.Types.Pointer,System.Int64)">
            <summary>
            Subtracts an address from the value of a pointer.
            </summary>
            <param name="ptr">The pointer to subtract the offset from.</param>
            <param name="address">The address to subtract.</param>
            <returns>A new pointer that reflects the subtraction of address from pointer.</returns>
        </member>
        <member name="M:CoreExtensions.Types.Pointer.op_Subtraction(CoreExtensions.Types.Pointer,System.UInt64)">
            <summary>
            Subtracts an address from the value of a pointer.
            </summary>
            <param name="ptr">The pointer to subtract the offset from.</param>
            <param name="address">The address to subtract.</param>
            <returns>A new pointer that reflects the subtraction of address from pointer.</returns>
        </member>
    </members>
</doc>
